{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","clock","callBackendAPI","a","axios","get","response","body","data","status","Error","message","runes","Audio","sound","played","this","intervalId","setInterval","loadData","then","res","express","setState","toString","padStart","randomNum","Math","floor","random","console","log","play","catch","err","className","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,gMC2F5BC,E,kDA/Eb,aAAe,IAAD,8BACZ,gBALFC,MAAQ,CACNC,MAAO,sBAGK,EAuDdC,eAvDc,sBAuDG,8BAAAC,EAAA,sEACQC,IAAMC,IAAI,yCADlB,UACTC,EADS,OAETC,EAAOD,EAASE,KAEE,MAApBF,EAASG,OAJE,sBAKPC,MAAMH,EAAKI,SALJ,gCAORJ,GAPQ,2CArDf,EAAKK,MAAQ,IAAIC,MAAM,kBACvB,EAAKC,MAAQ,CAAC,IAAID,MAAM,kBACxB,IAAIA,MAAM,gBACV,IAAIA,MAAM,kBACV,IAAIA,MAAM,kBACV,IAAIA,MAAM,gBACV,IAAIA,MAAM,sBACV,IAAIA,MAAM,kBACV,IAAIA,MAAM,iBACV,IAAIA,MAAM,aACV,IAAIA,MAAM,cACV,IAAIA,MAAM,eACV,IAAIA,MAAM,aACV,IAAIA,MAAM,aACV,IAAIA,MAAM,iBACV,IAAIA,MAAM,iBACV,IAAIA,MAAM,eACV,IAAIA,MAAM,iBACV,IAAIA,MAAM,aACV,IAAIA,MAAM,eACV,IAAIA,MAAM,aACV,IAAIA,MAAM,kBACV,EAAKE,QAAS,EAxBF,E,gEA2BO,IAAD,OAClBC,KAAKC,WAAaC,aAAY,kBAAM,EAAKC,aAAY,O,iCAG3C,IAAD,OACTH,KAAKd,iBACJkB,MAAK,SAAAC,GACJ,GAAuB,uBAAnBA,EAAIC,QAAQ,GAKhB,GADA,EAAKC,SAAS,CAAEtB,MAAM,GAAD,OAAKoB,EAAIC,QAAQ,GAAGE,WAAWC,SAAS,EAAG,KAA3C,YAAmDJ,EAAIC,QAAQ,GAAGE,WAAWC,SAAS,EAAG,SACzGJ,EAAIC,QAAQ,GAAG,GAAK,IAAM,GAAyB,KAAnBD,EAAIC,QAAQ,IAAgC,KAAnBD,EAAIC,QAAQ,IAAgC,KAAnBD,EAAIC,QAAQ,IAAe,EAAKP,OAGhH,GAAwB,KAAnBM,EAAIC,QAAQ,IAAgC,KAAnBD,EAAIC,QAAQ,IAAgC,KAAnBD,EAAIC,QAAQ,IAAe,EAAKP,OAKhE,IAAnBM,EAAIC,QAAQ,IAA+B,IAAnBD,EAAIC,QAAQ,IAA+B,IAAnBD,EAAIC,QAAQ,KACrE,EAAKP,QAAS,OANsF,CACpG,IAAMW,EAlDaC,KAAKC,MAAsB,GAAhBD,KAAKE,UAmDnCC,QAAQC,IAAIL,GACZ,EAAKZ,MAAMY,GAAWM,OACtB,EAAKjB,QAAS,OANd,EAAKH,MAAMoB,OACX,EAAKjB,QAAS,OANd,EAAKQ,SAAS,CAACtB,MAAO,0BAgBzBgC,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,Q,+BAe1B,OACE,yBAAKC,UAAU,OACb,uBAAGC,GAAG,WAAN,6DACA,yBAAKD,UAAY,SACf,6EACA,uBAAGA,UAAU,aAAanB,KAAKhB,MAAMC,a,GA5E7BoC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLvB,QAAQuB,MAAMA,EAAM1C,c","file":"static/js/main.f2d4c1a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\n\nconst randomNumber = () => Math.floor(Math.random() * 21)\n\nclass App extends Component {\n  state = {\n    clock: \"Waiting for a game\"\n  };\n\n  constructor() {\n    super()\n    this.runes = new Audio(\"/havemoney.mp3\")\n    this.sound = [new Audio(\"/helpornot.mp3\"), \n    new Audio(\"/biteass.mp3\"), \n    new Audio(\"/biteass-2.mp3\"), \n    new Audio(\"/shutnoise.mp3\"), \n    new Audio(\"/suicide.mp3\"), \n    new Audio(\"/letsgoalready.mp3\"),\n    new Audio(\"/blackjack.mp3\"), \n    new Audio(\"/5dollars.mp3\"),\n    new Audio(\"/baby.mp3\"),\n    new Audio(\"/drugs.mp3\"),\n    new Audio(\"/grease.mp3\"),\n    new Audio(\"/hell.mp3\"),\n    new Audio(\"/idea.mp3\"),\n    new Audio(\"/peasants.mp3\"),\n    new Audio(\"/runagain.mp3\"),\n    new Audio(\"/shutup.mp3\"), \n    new Audio(\"/skintube.mp3\"),\n    new Audio(\"/slow.mp3\"),\n    new Audio(\"/stupid.mp3\"),\n    new Audio(\"/suck.mp3\"),\n    new Audio(\"/violence.mp3\")]\n    this.played = false;\n  }\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => this.loadData(), 1000)\n  }\n\n  loadData() {\n    this.callBackendAPI()\n    .then(res => {\n      if (res.express[2] === \"Waiting for a game\") {\n        this.setState({clock: \"Waiting for a game\"})\n        return;\n      }\n      this.setState({ clock: `${res.express[0].toString().padStart(2, \"0\")}:${res.express[1].toString().padStart(2, \"0\")}` })\n      if ((res.express[0]+1) % 5 === 0 && (res.express[1] === 44 || res.express[1] === 43 || res.express[1] === 45) && !this.played) {\n        this.runes.play();\n        this.played = true;\n      } else if ((res.express[1] === 44 || res.express[1] === 43 || res.express[1] === 45) && !this.played) {\n        const randomNum = randomNumber();\n        console.log(randomNum)\n        this.sound[randomNum].play();\n        this.played = true;\n      } else if (res.express[1] === 0 || res.express[1] === 1 || res.express[1] === 2) {\n        this.played = false;\n      }\n    })\n    .catch(err => console.log(err));\n  }\n\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n  callBackendAPI = async () => {\n    const response = await axios.get('http://localhost:5000/express_backend');\n    const body = response.data;\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p id=\"ceiling\">This is invisible text to keep the image from moving down</p>\n        <div className = \"clock\">\n          <h1>Dota 2 Camp Stacking and Bounty Rune reminder</h1>\n          <p className=\"App-intro\">{this.state.clock}</p>\n        </div>\n      </div>\n\n    );\n  }\n} \n\nexport default App;\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n\n// const randomNumber = () => Math.floor(Math.random() * 21)\n\n// const App = () => {\n//   const [clock, setClock] = useState('Waiting for a game') \n//   const [dotaData, setDota] = useState({})\n\n//   const sound = [new Audio(\"/helpornot.mp3\"), \n//       new Audio(\"/biteass.mp3\"), \n//       new Audio(\"/biteass-2.mp3\"), \n//       new Audio(\"/shutnoise.mp3\"), \n//       new Audio(\"/suicide.mp3\"), \n//       new Audio(\"/letsgoalready.mp3\"),\n//       new Audio(\"/blackjack.mp3\"), \n//       new Audio(\"/5dollars.mp3\"),\n//       new Audio(\"/baby.mp3\"),\n//       new Audio(\"/drugs.mp3\"),\n//       new Audio(\"/grease.mp3\"),\n//       new Audio(\"/hell.mp3\"),\n//       new Audio(\"/idea.mp3\"),\n//       new Audio(\"/peasants.mp3\"),\n//       new Audio(\"/runagain.mp3\"),\n//       new Audio(\"/shutup.mp3\"), \n//       new Audio(\"/skintube.mp3\"),\n//       new Audio(\"/slow.mp3\"),\n//       new Audio(\"/stupid.mp3\"),\n//       new Audio(\"/suck.mp3\"),\n//       new Audio(\"/violence.mp3\")]\n\n//   useEffect(() => {\n//     console.log('effect')\n//     axios\n//       .get('http://localhost:5000/express_backend')\n//       .then(response => {\n//         setDota(response.data)\n//       })\n//   }, [])\n\n//   //   componentDidMount() {\n// //     this.intervalId = setInterval(() => this.loadData(), 1000)\n// //   }\n\n// //   loadData() {\n// //     this.callBackendAPI()\n// //     .then(res => {\n// //       if (res.express[2] === \"Waiting for a game\") {\n// //         this.setState({clock: \"Waiting for a game\"})\n// //         return;\n// //       }\n// //       this.setState({ clock: `${res.express[0].toString().padStart(2, \"0\")}:${res.express[1].toString().padStart(2, \"0\")}` })\n// //       if ((res.express[0]+1) % 5 === 0 && (res.express[1] === 44 || res.express[1] === 43 || res.express[1] === 45) && !this.played) {\n// //         this.runes.play();\n// //         this.played = true;\n// //       } else if ((res.express[1] === 44 || res.express[1] === 43 || res.express[1] === 45) && !this.played) {\n// //         const randomNum = randomNumber();\n// //         console.log(randomNum)\n// //         this.sound[randomNum].play();\n// //         this.played = true;\n// //       } else if (res.express[1] === 0 || res.express[1] === 1 || res.express[1] === 2) {\n// //         this.played = false;\n// //       }\n// //     })\n// //     .catch(err => console.log(err));\n// //   }\n\n// //     // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n// //   callBackendAPI = async () => {\n// //     const response = await axios.get('/express_backend');\n// //     const body = response.data;\n\n// //     if (response.status !== 200) {\n// //       throw Error(body.message) \n// //     }\n// //     return body;\n// //   };\n\n//   return  (\n//     <div className=\"App\">\n//       <p id=\"ceiling\">This is invisible text to keep the image from moving down</p>\n//       <div className = \"clock\">\n//         <h1>Dota 2 Camp Stacking and Bounty Rune reminder</h1>\n//         <p className=\"App-intro\">{this.state.clock}</p>\n//       </div>\n//     </div>\n\n//   )\n// }\n\n// export default App ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}