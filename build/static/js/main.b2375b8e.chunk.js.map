{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","clock","setClock","mute","setMute","volumeSetting","setVolume","runes","Audio","sound","played","useEffect","interval","setInterval","callBackendAPI","then","res","express","toString","padStart","document","getElementById","checked","randomNum","Math","floor","random","volume","play","catch","err","console","log","loadData","clearInterval","a","axios","get","response","body","data","status","Error","message","className","id","type","value","onChange","event","Number","target","defaultChecked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b2375b8e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css';\nimport axios from 'axios'\n\nconst randomNumber = () => Math.floor(Math.random() * 21)\n\nconst App = () => {\n  const [clock, setClock] = useState('Waiting for a game') \n  const [mute, setMute] = useState(false)\n  const [volumeSetting, setVolume] = useState(5)\n\n  const runes = new Audio(\"/havemoney.mp3\")\n  const sound = [new Audio(\"/helpornot.mp3\"), \n      new Audio(\"/biteass.mp3\"), \n      new Audio(\"/biteass-2.mp3\"), \n      new Audio(\"/shutnoise.mp3\"), \n      new Audio(\"/suicide.mp3\"), \n      new Audio(\"/letsgoalready.mp3\"),\n      new Audio(\"/blackjack.mp3\"), \n      new Audio(\"/5dollars.mp3\"),\n      new Audio(\"/baby.mp3\"),\n      new Audio(\"/drugs.mp3\"),\n      new Audio(\"/grease.mp3\"),\n      new Audio(\"/hell.mp3\"),\n      new Audio(\"/idea.mp3\"),\n      new Audio(\"/peasants.mp3\"),\n      new Audio(\"/runagain.mp3\"),\n      new Audio(\"/shutup.mp3\"), \n      new Audio(\"/skintube.mp3\"),\n      new Audio(\"/slow.mp3\"),\n      new Audio(\"/stupid.mp3\"),\n      new Audio(\"/suck.mp3\"),\n      new Audio(\"/violence.mp3\")]\n  let played = false\n\n  useEffect(() => {\n    const interval = setInterval(() => loadData(volumeSetting, mute), 1000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [volumeSetting])\n\n  function handleChange(event) {\n    setVolume(Number(event.target.value))\n  }  \n\n  const toggleChange = (event) => {\n    setMute(event.target.checked)\n  }\n\n  function loadData(volumeSetting, mute) {\n    callBackendAPI()\n    .then(res => {\n      if (res.express[2] === \"Waiting for a game\") {\n        setClock(\"Waiting for a game\")\n        return;\n      }\n      setClock(`${res.express[0].toString().padStart(2, \"0\")}:${res.express[1].toString().padStart(2, \"0\")}`)\n      const muteStatus = document.getElementById('mute-button').checked\n      if (muteStatus) return\n      else if ((res.express[0]+1) % 3 === 0 && (res.express[1] === 44 || res.express[1] === 43 || res.express[1] === 45) && !played) {\n        runes.volume = volumeSetting / 100\n        runes.play();\n        played = true;\n      } else if ((res.express[1] === 44 || res.express[1] === 43 || res.express[1] === 45) && !played) {\n        let randomNum = randomNumber();\n        sound[randomNum].volume = volumeSetting / 100\n        sound[randomNum].play();\n        played = true;\n      } else if (res.express[1] === 0 || res.express[1] === 1 || res.express[1] === 2) {\n        played = false;\n      }\n    })\n    .catch(err => console.log(err));\n  }\n\n  async function callBackendAPI () {\n    const response = await axios.get('/express_backend');\n    const body = response.data;\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  return  (\n    <div className=\"App\">\n      <p id=\"ceiling\">This is invisible text to keep the image from moving down</p>\n      <div className = \"clock\">\n        <h1>Dota 2 Camp Stacking and Bounty Rune reminder</h1>\n        <p className=\"App-intro\">{clock}</p>\n        <input type='number' value={volumeSetting} onChange={handleChange} />  \n        <input type='checkbox' defaultChecked={mute} onChange={toggleChange} id=\"mute-button\"/>\n      </div>\n    </div>\n\n  )\n}\n\nexport default App ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}